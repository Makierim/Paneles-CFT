@{
    ViewData["Title"] = "Mapa de Cálculo Solar";
}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Mapa de Instalación Solar</title>
</head>
<body>
<h1>@ViewData["Title"]</h1>

<p>Haz clic en el mapa para seleccionar una ubicación y obtener la radiación solar</p>

<!-- Contenedor del mapa -->
<div id="map"></div>

<!-- Muestra las coordenadas seleccionadas -->
<p id="coordinates"></p>

<!-- Muestra los resultados de la radiación solar -->
<div id="solarDataContainer">
    <p id="annualSolarData"></p>
    <div id="monthlySolarData"></div>
</div>

<script>
    let map;
    let mapMarker;
    // Centro inicial del mapa (Angol)
    let center = { lat: -37.7973327, lng: -72.7089080};
    let infoWindow;

    async function initMap() {
        // Solicitar las bibliotecas necesarias
        const { Map } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
        const { InfoWindow } = await google.maps.importLibrary("maps");

        map = new Map(document.getElementById('map'), {
            center,
            zoom: 10,
            mapId: "DEMO_MAP_ID",
        });

        // Crear la ventana de información
        infoWindow = new InfoWindow();

        // Crear el marcador inicial
        mapMarker = new AdvancedMarkerElement({
            map: map,
            position: center,
            title: "Haz clic para seleccionar la ubicación en el mapa y obtener datos",
        });

        // Evento para cuando se haga click en el mapa
        map.addListener("click", (event) => {
            const position = event.latLng;
            
            // Si el marcador ya existe, actualizar posición
            mapMarker.position = position;
            mapMarker.map = map;

            // Cerrar la ventana de información anterior
            infoWindow.close();

            // Mostrar coordenadas
            document.getElementById('coordinates').innerText = `Lat: ${position.lat().toFixed(6)}, Lng: ${position.lng().toFixed(6)}`;

            // Hacer una llamada a la API para obtener la radiación solar (Configurar PVGIS)
            getSolarData(position.lat(), position.lng()); // Usamos las coordenadas del marcador

            // Establecer contenido de la nueva ventana de información
            const content = `
                <div>
                    <h3 id="info">Ubicación seleccionada:</h3>
                    <p id="info"><strong>Lat:</strong> ${position.lat().toFixed(6)}, <strong>Lng:</strong> ${position.lng().toFixed(6)}</p>
                    <p id="info">Obteniendo datos solares...</p>
                </div>
            `;

            // Establecer la posición de la ventana de información en el marcador
            infoWindow.setContent(content);
            infoWindow.setPosition(position);
            infoWindow.open(map, mapMarker);
        });
    }

    // Función para obtener radiación solar del SolarProxyController
    async function getSolarData(lat, lng) {
        // Limpiar resultados anteriores
        document.getElementById('annualSolarData').innerText = "Cargando datos...";
        document.getElementById('monthlySolarData').innerHTML = ""; // Limpiar la lista mensual

        const url = `/SolarProxy/SolarData?lat=${lat}&lng=${lng}`;

        try {
            const response = await fetch(url);

            // Asegurar una respuesta exitosa antes de procesar
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Error del servidor proxy: ${response.status} - ${errorText}`);
            }

            const data = await response.json();
            console.log("Datos solares recibidos:", data);

            // Actualizar la InfoWindow del marcador con los resultados
            let infoWindowContent =  `
                <div>
                    <h3 id="info">Ubicación:</h3>
                    <p id="info"><strong>Lat:</strong> ${data.latitude.toFixed(6)}, <strong>Lng:</strong> ${data.longitude.toFixed(6)}</p>
            `;

            // Ajustar manejo de la respuesta
            if (data.solarDataAvailable) {
                // Ej: Mostrar la energía anual
                const annualIrradiance = data.annualIrradiance_kWh_m2;
                // Array de objetos mensuales
                const monthlyIrradiance = data.monthlyIrradiance;

                // Actualizar interfaz de usuario con los datos
                document.getElementById('annualSolarData').innerText =
                    `Irradiación Anual Promedio: ${annualIrradiance ? annualIrradiance.toFixed(2) + ' kWh/m²/año' : 'N/A'}`;

                // Construir y actualizar la lista de datos mensuales
                let monthlyHtml = '<h4>Irradiación Mensual Promedio (kWh/m²):</h4><ul>';
                if (monthlyIrradiance && monthlyIrradiance.length > 0) {
                    monthlyIrradiance.forEach(monthData => {
                        monthlyHtml += `<li>${monthData.Month}: ${monthData.irradiance_kWh_m2.toFixed(2)}</li>`;
                    });
                } else {
                    monthlyHtml += `<li>No se encontraron datos mensuales</li>`;
                }
                monthlyHtml += '</ul>';
                document.getElementById('monthlySolarData').innerHTML = monthlyHtml;

                // Actualizar contenido de la InfoWindow
                infoWindowContent += `
                    <p id="info"><strong>Anual:</strong> ${annualIrradiance ? annualIrradiance.toFixed(2) + ' kWh/m²/año' : 'N/A'}</p>
                    <p id="info"><i>(Ver detalles mensuales abajo)</i></p>
                </div>
                `;
            } else {
                document.getElementById('annualSolarData').innerText = "No hay datos solares disponibles para esta ubicación o la API de PVGIS no retornó datos.";
                document.getElementById('monthlySolarData').innerHTML = ""; // Asegura que no haya lista vacía
            
                // Actualizar contenido de la InfoWindow si no hay datos
                infoWindowContent += `
                    <p id="info">No hay datos solares disponibles.</p>
                </div>
                `;
            }

            // Asegurarse de que infoWindow esté definido antes de usar setContent/open
            if (infoWindow) {
                infoWindow.setContent(infoWindowContent);
                infoWindow.open(map, mapMarker);
            } else {
                console.error("Error: infoWindow no está inicializado");
            }

        } catch (error) {
            console.error("Error obteniendo los datos solares:", error);
            document.getElementById('annualSolarData').innerText = `Error: ${error.message}`;
            document.getElementById('monthlySolarData').innerHTML = "";

            // Asegurarse de que infoWindow esté definido antes de usar setContent/open
            if (infoWindow) {
                infoWindow.setContent(`
                    <div>
                        <h3 id="info">Error:</h3>
                        <p id="info">${error.message}</p>
                `);
            } else {
                console.error("Error: infoWindow no está inicializado en el bloque catch.");
            } 
        }
    }
// Cargar el mapa una vez que el DOM esté listo
// La API de Google Maps se carga con defer y callback, que llama a initMap automáticamente.
// Asegurarse de que la función 'getSolarData' se llame con la latitud y longitud
// obtenidas en el evento 'click' del marcador de Google Maps.
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD5ToidrAXpxR_glRnvnaEf_of4r7JXcEI&loading=async&v=weekly&callback=initMap&libraries=marker" async defer></script>
</body>
</html>